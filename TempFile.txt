Alright üöÄ Let me give you a complete Next.js project structure with Razorpay integration ‚Äî including frontend (checkout button), backend (API routes), and environment setup.


---

üìÇ Project Structure

my-next-razorpay/
‚îÇ‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ index.js            # Home page with Pay button
‚îÇ   ‚îî‚îÄ‚îÄ api/
‚îÇ       ‚îú‚îÄ‚îÄ create-order.js # API to create order
‚îÇ       ‚îî‚îÄ‚îÄ verify-payment.js # API to verify payment
‚îÇ‚îÄ‚îÄ .env.local              # Environment variables
‚îÇ‚îÄ‚îÄ package.json


---

üîπ 1. Install Dependencies

npx create-next-app my-next-razorpay
cd my-next-razorpay
npm install razorpay


---

üîπ 2. Add Environment Variables

Create .env.local at the root:

RAZORPAY_KEY_ID=rzp_test_xxxxxxxxxx
RAZORPAY_KEY_SECRET=yyyyyyyyyyyyyyyyy
NEXT_PUBLIC_RAZORPAY_KEY_ID=rzp_test_xxxxxxxxxx

‚ö†Ô∏è

RAZORPAY_KEY_SECRET ‚Üí never exposed (server only).

NEXT_PUBLIC_RAZORPAY_KEY_ID ‚Üí can be used in frontend.



---

üîπ 3. Backend API ‚Äì Create Order

üìÇ pages/api/create-order.js

import Razorpay from "razorpay";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }

  try {
    const razorpay = new Razorpay({
      key_id: process.env.RAZORPAY_KEY_ID,
      key_secret: process.env.RAZORPAY_KEY_SECRET,
    });

    const options = {
      amount: req.body.amount * 100, // amount in paise
      currency: "INR",
      receipt: `receipt_order_${Date.now()}`,
    };

    const order = await razorpay.orders.create(options);
    res.status(200).json(order);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}


---

üîπ 4. Backend API ‚Äì Verify Payment

üìÇ pages/api/verify-payment.js

import crypto from "crypto";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }

  try {
    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;

    const sign = razorpay_order_id + "|" + razorpay_payment_id;
    const expectedSign = crypto
      .createHmac("sha256", process.env.RAZORPAY_KEY_SECRET)
      .update(sign.toString())
      .digest("hex");

    if (razorpay_signature === expectedSign) {
      return res.status(200).json({ success: true, message: "Payment verified" });
    } else {
      return res.status(400).json({ success: false, message: "Invalid signature" });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}


---

üîπ 5. Frontend ‚Äì Checkout Page

üìÇ pages/index.js

import { useState } from "react";

export default function Home() {
  const [loading, setLoading] = useState(false);

  const loadRazorpay = async () => {
    setLoading(true);

    // Load Razorpay script dynamically
    const script = document.createElement("script");
    script.src = "https://checkout.razorpay.com/v1/checkout.js";
    script.onload = async () => {
      setLoading(false);

      // Call backend to create order
      const orderRes = await fetch("/api/create-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount: 500 }), // ‚Çπ500
      });

      const order = await orderRes.json();

      const options = {
        key: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID, // Only Key ID here
        amount: order.amount,
        currency: order.currency,
        name: "My Next.js Shop",
        description: "Test Transaction",
        order_id: order.id,
        handler: async function (response) {
          // Send payment info to backend for verification
          const verifyRes = await fetch("/api/verify-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(response),
          });

          const verifyData = await verifyRes.json();
          if (verifyData.success) {
            alert("‚úÖ Payment successful & verified!");
          } else {
            alert("‚ùå Payment verification failed.");
          }
        },
        prefill: {
          name: "Your Name",
          email: "email@example.com",
          contact: "9999999999",
        },
        theme: { color: "#3399cc" },
      };

      const rzp = new window.Razorpay(options);
      rzp.open();
    };

    document.body.appendChild(script);
  };

  return (
    <div style={{ textAlign: "center", marginTop: "50px" }}>
      <h1>Next.js Razorpay Integration</h1>
      <button onClick={loadRazorpay} disabled={loading}>
        {loading ? "Processing..." : "Pay ‚Çπ500"}
      </button>
    </div>
  );
}


---

üîπ 6. Run the Project

npm run dev

Open: http://localhost:3000
Click Pay ‚Çπ500 ‚Üí Razorpay Checkout opens.


---

‚úÖ Flow Recap

1. User clicks Pay ‚Üí Next.js frontend loads Razorpay script.


2. Frontend calls /api/create-order ‚Üí backend creates order securely.


3. Razorpay Checkout opens ‚Üí user pays.


4. Razorpay returns payment_id, order_id, signature.


5. Frontend sends this to /api/verify-payment.


6. Backend verifies payment with KEY_SECRET.


7. ‚úÖ Payment confirmed securely.




---

Do you also want me to extend this example with a MongoDB/MySQL database integration so that successful payments are automatically stored in your DB?

